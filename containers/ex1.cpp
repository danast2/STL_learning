//идиома erase-move для контейнера std::vector
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    std::vector<int> v{1, 2, 3, 2, 5, 2, 6, 2, 4, 8};
    //Удалим некоторые элементы. Что именно? В нашем примере много значений 2,
    //удалим их:
    const auto new_end = remove(begin(v), end(v), 2);

    //укоротим размер вектора:
    v.erase(new_end, end(v));

    int lastElement = v.back(); //возвращает последний элемент в векторе

    for (auto i: v) {
        cout << i;
        if (i != lastElement) {
            cout << ", ";
        }
    }
    cout << '\n';

    //теперь удалим целый класс элементов, а не контрольные значения. Для этого сначала
    //определим ф-цию предикат, которая принимает число в качестве параметра и возвращает true
    //если переданное число нечетное

    const auto odd([](int i) { return i % 2 != 0; });

    //используем ф-цию remove_if, передавая ей значения с помощью ф-ции предиката,
    // Вместо удаления за два шага, теперь делаем это за один:

    v.erase(remove_if(begin(v), end(v), odd), end(v));

    //Мы удалили все нечетные элементы, но емкость вектора все еще соответствует
    //старым десяти элементам. На последнем шаге мы сократим эту емкость до ре-
    //ального размера вектора. Обратите внимание: это может привести к тому, что
    //код обслуживания вектора выделит новый фрагмент памяти, который будет
    //иметь соответствующий размер, и переместит все элементы из старого фраг-
    //мента в новый:

    v.shrink_to_fit();

    for (auto i: v) {
        cout << i;
        if (i != lastElement) {
            cout << ", ";
        }
    }

    return 0;
}